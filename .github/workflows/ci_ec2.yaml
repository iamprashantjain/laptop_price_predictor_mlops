name: CI/CD pipeline

on: push

jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install DVC (if not in requirements.txt)
        run: |
          pip install dvc

      - name: Run DVC pipeline
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          dvc repro

      - name: Run model loading unit tests
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python -m unittest tests/test_model.py


      - name: Run flask app tests
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python -m unittest tests/test_flask_app.py


      - name: login to dockerhub
        if: success()
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESSTOKEN }}


      - name: build docker image
        if: success()
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/laptop_price_predictor:latest .


      - name: push to dockerhub
        if: success()
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/laptop_price_predictor:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/laptop_price_predictor:latest
            docker stop laptop-price-predictor || true
            docker rm laptop-price-predictor || true
            docker run -d \
              -p 5000:5000 \
              --name laptop-price-predictor \
              ${{ secrets.DOCKERHUB_USERNAME }}/laptop_price_predictor:latest \
              gunicorn --bind 0.0.0.0:5000 flask_app.app:app